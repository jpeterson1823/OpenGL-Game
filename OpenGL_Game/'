#include <glm/gtc/matrix_transform.hpp>
#include "BasicEntity.hpp"

BasicEntity::BasicEntity(float maxHealth, const char* vertPath, const char* fragPath, std::vector<const char*> texPaths) {
	MAX_POS = 100.0;
	MIN_POS = -MAX_POS;
	if (maxHealth > 0)
		this->maxHealth = maxHealth;
	else
		this->maxHealth = 100.0f;
	health = this->maxHealth;
	living = true;

	// set initial position to origin
	pos = glm::vec2(0.0f);
	
	// set model matrix to identity
	model = glm::mat4(1.0f);

	// create vertices for sprite
	float* vertices = new float[30] {
		// positions         // texture coords
		-0.5f,  0.5f, 0.0f,  0.0f, 1.0f, // top left 
		 0.5f,  0.5f, 0.0f,  1.0f, 1.0f, // top right
		 0.5f, -0.5f, 0.0f,  1.0f, 0.0f, // bottom right

		 0.5f, -0.5f, 0.0f,  1.0f, 0.0f, // bottom right
		-0.5f, -0.5f, 0.0f,  0.0f, 0.0f, // bottom left
		-0.5f,  0.5f, 0.0f,  0.0f, 1.0f  // top left 
	};

	// load sprites
	for (const char* texPath : texPaths)
		sprites.push_back(Sprite(vertPath, fragPath, texPath, vertices, true));
	// set current sprite and default animation delay
	currentSprite = 0;
	animationDelay = 0.5f;
}

BasicEntity::~BasicEntity() {

}

void BasicEntity::die() {
	health = 0.0f;
	living = false;
}

bool BasicEntity::isAlive() {
	return living;
}

void BasicEntity::setAnimationDelay(float delay) {
	animationDelay = delay;
}

void BasicEntity::setPos(glm::vec2 pos) {
	this->pos = pos;
}


std::vector<Sprite>& BasicEntity::getSprites() {
	return sprites;
}

glm::mat4& BasicEntity::getModel() {
	return model;
}

glm::vec2 BasicEntity::getPos() {
	return pos;
}


float BasicEntity::heal(float heal) {
	health += heal;
	if (health > maxHealth)
		health = maxHealth;
	return health;
}

float BasicEntity::damage(float damage) {
	health -= damage;
	
	// if no health remains, die
	if (health <= 0.0f)
		die();

	return health;
}

void BasicEntity::move(glm::vec2 vec) {
	pos += vec;
	if (pos.x > MAX_POS)
		pos.x = MAX_POS;
	if (pos.x < MIN_POS)
		pos.x = MIN_POS;

	if (pos.y > MAX_POS)
		pos.y = MAX_POS;
	if (pos.y < MIN_POS)
		pos.y = MIN_POS;
}

void BasicEntity::animate(float dt) {
	if (dt >= animationDelay) {
		currentSprite++;
		if (currentSprite >= sprites.size())
			currentSprite = 0;
	}
}
